#! /usr/bin/env python
#  -*- coding: utf-8 -*-

""" A GUI that calculates solutions to the thin lens equation. """

# (c)2019 Jeff Chamberlain
# This program is free software: you can use it under the terms of the
# GNU Affero General Public License version 3. This program is distributed
# WITHOUT ANY WARRANTY of any kind. See the GNU Affero General Public License
# for more details. <https://www.gnu.org/licenses/>.

# GUI generated by PAGE version 4.22 in conjunction with Tcl version 8.6
#
#                   Lens Problem Designer by Jeff Chamberlain
# The program was written to aid physics instructors in the design of thin
# lens problems. Of course, it can also be used to simply solve problems. The
# intent is to form problems that have 'nice' answers, i.e. values that are
# correct to three significant digits, but can be written with only two. For
# instance, an answer of 3.7026 is good to three digits written as 3.7.

# This base module sets up the GUI widgets and binds them to events that are
# in the support module.

import tkinter as tk
import tkinter.ttk as ttk
import LensProbDes_support


def vp_start_gui():
    """ Construct the GUI, initialize the values, and wait for events."""
    global w, root, top, picon
    root = tk.Tk()
    filename = "Fizzix137-32x32.gif"
    icon = tk.PhotoImage(file=filename)
    root.tk.call('wm', 'iconphoto', root._w, icon)
    LensProbDes_support.set_Tk_var()
    top = Toplevel1(root)
    root.iconify()
    root.update()
    root.deiconify()
    LensProbDes_support.init(root, top)
    LensProbDes_support.reset_entries()
    LensProbDes_support.send_message("Welcome to Lens Problem Designer",
                                     "blue")
    root.mainloop()


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # ---X11 color: 'gray85'
        _fgcolor = '#000000'  # ---X11 color: 'black'
        _compcolor = '#d9d9d9'  # -X11 color: 'gray85'
        # _ana1color = '#d9d9d9'  # -X11 color: 'gray85'
        _ana2color = '#ececec'  # -Closest X11 color: 'gray92'
        self.style = ttk.Style()
        self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor),
                                        ('active', _ana2color)])

        top.geometry("640x480+25+150")
        top.title("Lens Problem Designer")
        top.configure(background="#b0c0f0")

        self.focal_entry = tk.Entry(top)
        self.focal_entry.place(relx=0.129, rely=0.125,
                               height=30, relwidth=0.13)
        self.focal_entry.configure(background="white")
        self.focal_entry.configure(font="-family {Times New Roman} -size 12")
        self.focal_entry.configure(foreground="#000000")
        self.focal_entry.configure(selectbackground="#c4c4c4")
        self.focal_entry.configure(selectforeground="black")
        self.focal_entry.configure(textvariable=LensProbDes_support.focal_text)

        self.object_entry = tk.Entry(top)
        self.object_entry.place(relx=0.129, rely=0.3,
                                height=30, relwidth=0.13)
        self.object_entry.configure(background="white")
        self.object_entry.configure(font="-family {Times New Roman} -size 12")
        self.object_entry.configure(foreground="#000000")
        self.object_entry.configure(selectbackground="#c4c4c4")
        self.object_entry.configure(selectforeground="black")
        self.object_entry.configure(
                textvariable=LensProbDes_support.object_text)

        self.image_entry = tk.Entry(top)
        self.image_entry.place(relx=0.129, rely=0.475,
                               height=30, relwidth=0.13)
        self.image_entry.configure(background="white")
        self.image_entry.configure(font="-family {Times New Roman} -size 12")
        self.image_entry.configure(foreground="#000000")
        self.image_entry.configure(readonlybackground="white")
        self.image_entry.configure(selectbackground="#c4c4c4")
        self.image_entry.configure(selectforeground="black")
        self.image_entry.configure(textvariable=LensProbDes_support.image_text)

        self.magnification_entry = tk.Entry(top)
        self.magnification_entry.place(relx=0.129, rely=0.65,
                                       height=30, relwidth=0.13)
        self.magnification_entry.configure(background="#ffffffffffff")
        self.magnification_entry.configure(
                font="-family {Times New Roman} -size 12")
        self.magnification_entry.configure(foreground="#000000")
        self.magnification_entry.configure(readonlybackground="white")
        self.magnification_entry.configure(selectbackground="#c4c4c4")
        self.magnification_entry.configure(selectforeground="black")
        self.magnification_entry.configure(
                textvariable=LensProbDes_support.magnification_text)

        self.focal_entry.bind_class(
                'Entry', '<KeyPress>', LensProbDes_support.UserTyped)
        self.focal_entry.bind_class(
                'Entry', '<Return>', LensProbDes_support.KeyPressed)
        self.focal_entry.bind_class(
                'Entry', '<Delete>', LensProbDes_support.KeyPressed)
        self.focal_entry.bind_class(
                'Entry', '<BackSpace>', LensProbDes_support.KeyPressed)

        self.Label1 = tk.Label(top)
        self.Label1.place(x=80, y=38, height=20, width=150)
        self.Label1.configure(anchor=tk.NW)
        self.Label1.configure(background="#b0c0f0")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Focal Length''')

        self.Label2 = tk.Label(top)
        self.Label2.place(x=80, y=120, height=20, width=200)
        self.Label2.configure(background="#b0c0f0")
        self.Label2.configure(anchor=tk.NW)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Object Distance''')

        self.Label3 = tk.Label(top)
        self.Label3.place(x=80, y=202, height=20, width=150)
        self.Label3.configure(anchor=tk.NW)
        self.Label3.configure(background="#b0c0f0")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Image Distance''')

        self.Label4 = tk.Label(top)
        self.Label4.place(x=80, y=284, height=20, width=150)
        self.Label4.configure(anchor=tk.NW)
        self.Label4.configure(background="#b0c0f0")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Magnification''')

        self.message_label = tk.Label(top)
        self.message_label.place(x=15, y=427,  height=31, width=317)
        self.message_label.configure(background="#ffffcf")
        self.message_label.configure(
                font="-family {Segoe UI} -size 9 -weight bold")
        self.message_label.configure(foreground="#000000")
        self.message_label.configure(text="start")
        self.message_label.configure(textvariable=LensProbDes_support.message)
        self.message_label.configure(width=317)

        self.clear_btn = tk.Button(top)
        self.clear_btn.place(x=370, y=423,  height=42, width=85)
        self.clear_btn.configure(background="#d9d9d9")
        self.clear_btn.configure(command=LensProbDes_support.clear_table)
        self.clear_btn.configure(foreground="#000000")
        self.clear_btn.configure(pady="0")
        self.clear_btn.configure(text='''Clear List''')

        self.menubar = tk.Menu(top, font="TkMenuFont",
                               bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="File")
        self.sub_menu.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.OnExitMenu,
                font="TkMenuFont",
                foreground="#000000",
                label="Exit")

        self.sub_menu1 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                                 compound="left",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="List")
        self.sub_menu1.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.GenerateList,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Generate List")
        self.sub_menu1.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.clear_table,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Clear List")
        self.sub_menu1.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.list_demo,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="List Demo")

        self.sub_menu12 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                                 compound="left",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Reset")
        self.sub_menu12.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.reset_entries,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Reset Entries")
        self.sub_menu12.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.clear_table,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Clear List")
        self.sub_menu12.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.reset_all,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Reset All")

        self.sub_menu123 = tk.Menu(top, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu123,
                                 compound="left",
                                 font="TkMenuFont",
                                 foreground="#000000",
                                 label="Help")
        self.sub_menu123.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.ShowHelp,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Instructions")
        self.sub_menu123.add_command(
                background="#d9d9d9",
                command=LensProbDes_support.ShowAbout,
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="About")

        self.focal_check = tk.Checkbutton(top)
        self.focal_check.place(relx=0.11, rely=0.125, y=3,
                               relheight=0.05, relwidth=0.016)
        self.focal_check.configure(background="#b0c0f0")
        self.focal_check.configure(foreground="#000000")
        self.focal_check.configure(justify='left')
        self.focal_check.configure(takefocus="0")
        self.focal_check.configure(variable=LensProbDes_support.focal_select)
        self.focal_check.configure(width=30)

        self.object_check = tk.Checkbutton(top)
        self.object_check.place(relx=0.11, rely=0.3, y=3,
                                relheight=0.05, relwidth=0.016)
        self.object_check.configure(background="#b0c0f0")
        self.object_check.configure(foreground="#000000")
        self.object_check.configure(justify='left')
        self.object_check.configure(takefocus="0")
        self.object_check.configure(variable=LensProbDes_support.object_select)
        self.object_check.configure(width=30)

        self.image_check = tk.Checkbutton(top)
        self.image_check.place(relx=0.11, rely=0.475, y=3,
                               relheight=0.05, relwidth=0.016)
        self.image_check.configure(background="#b0c0f0")
        self.image_check.configure(foreground="#000000")
        self.image_check.configure(justify='left')
        self.image_check.configure(takefocus="0")
        self.image_check.configure(variable=LensProbDes_support.image_select)
        self.image_check.configure(width=30)

        self.magnification_check = tk.Checkbutton(top)
        self.magnification_check.place(relx=0.11, rely=0.65, y=3,
                                       relheight=0.05, relwidth=0.016)
        self.magnification_check.configure(background="#b0c0f0")
        self.magnification_check.configure(foreground="#000000")
        self.magnification_check.configure(justify='left')
        self.magnification_check.configure(takefocus="0")
        self.magnification_check.configure(
                variable=LensProbDes_support.magnification_select)
        self.magnification_check.configure(width=30)

        self.focal_radio = tk.Radiobutton(top)
        self.focal_radio.place(relx=0.265, rely=0.138,
                               relheight=0.05, relwidth=0.03)
        self.focal_radio.configure(background="#b0c0f0")
        self.focal_radio.configure(foreground="#000000")
        self.focal_radio.configure(justify='left')
        self.focal_radio.configure(takefocus="0")
        self.focal_radio.configure(value="focal")
        self.focal_radio.configure(variable=LensProbDes_support.radio)

        self.object_radio = tk.Radiobutton(top)
        self.object_radio.place(relx=0.265, rely=0.313,
                                relheight=0.05, relwidth=0.03)
        self.object_radio.configure(background="#b0c0f0")
        self.object_radio.configure(foreground="#000000")
        self.object_radio.configure(justify='left')
        self.object_radio.configure(takefocus="0")
        self.object_radio.configure(value="object")
        self.object_radio.configure(variable=LensProbDes_support.radio)

        self.image_radio = tk.Radiobutton(top)
        self.image_radio.place(relx=0.265, rely=0.488,
                               relheight=0.05, relwidth=0.03)
        self.image_radio.configure(background="#b0c0f0")
        self.image_radio.configure(foreground="#000000")
        self.image_radio.configure(justify='left')
        self.image_radio.configure(takefocus="0")
        self.image_radio.configure(value="image")
        self.image_radio.configure(variable=LensProbDes_support.radio)

        self.mag_radio = tk.Radiobutton(top)
        self.mag_radio.place(relx=0.265, rely=0.663,
                             relheight=0.05, relwidth=0.03)
        self.mag_radio.configure(background="#b0c0f0")
        self.mag_radio.configure(foreground="#000000")
        self.mag_radio.configure(justify='left')
        self.mag_radio.configure(takefocus="0")
        self.mag_radio.configure(value="magnification")
        self.mag_radio.configure(variable=LensProbDes_support.radio)

        self.sigfig_spin = tk.Spinbox(top, from_=3.0, to=6.0)
        self.sigfig_spin.place(x=585, y=90, height=29, width=30)
        self.sigfig_spin.configure(background="white")
        self.sigfig_spin.configure(buttonbackground="#d9d9d9")
        self.sigfig_spin.configure(font="-family {Segoe UI} -size 9")
        self.sigfig_spin.configure(foreground="black")
        self.sigfig_spin.configure(justify="center")
        self.sigfig_spin.configure(selectbackground="#c4c4c4")
        self.sigfig_spin.configure(selectforeground="black")
        self.sigfig_spin.configure(textvariable=LensProbDes_support.sig_figs)
        self.sigfig_spin.configure(width=1)

        self.sigfigs_label = tk.Label(top)
        self.sigfigs_label.place(x=575, y=70,  height=20, width=50)
        self.sigfigs_label.configure(background="#b0c0f0")
        self.sigfigs_label.configure(
                font="-family {Segoe UI} -size 9 -weight bold")
        self.sigfigs_label.configure(foreground="#000000")
        self.sigfigs_label.configure(text='''Sig Figs''')

        self.style.configure('Treeview.Heading',  font="TkDefaultFont")
        self.DataTree = ScrolledTreeView(top)

        self.DataTree.place(relx=0.322, rely=0.05,
                            relheight=0.8, relwidth=0.530)
        self.DataTree.configure(columns="f so si m")
        self.DataTree.configure(takefocus="False")
        # build_treeview_support starting.
        self.DataTree.heading("#0", text=" ")
        self.DataTree.heading("#0", anchor="center")
        self.DataTree.column("#0", width="1")
        self.DataTree.column("#0", minwidth="1")
        self.DataTree.column("#0", stretch="0")
        self.DataTree.column("#0", anchor="w")
        self.DataTree.heading("f", text="f")
        self.DataTree.heading("f", anchor="center")
        self.DataTree.column("f", width="84")
        self.DataTree.column("f", minwidth="20")
        self.DataTree.column("f", stretch="0")
        self.DataTree.column("f", anchor="w")
        self.DataTree.heading("so", text="s\u2080")
        self.DataTree.heading("so", anchor="center")
        self.DataTree.column("so", width="84")
        self.DataTree.column("so", minwidth="20")
        self.DataTree.column("so", stretch="0")
        self.DataTree.column("so", anchor="w")
        self.DataTree.heading("si", text="s\u1D62")
        self.DataTree.heading("si", anchor="center")
        self.DataTree.column("si", width="84")
        self.DataTree.column("si", minwidth="20")
        self.DataTree.column("si", stretch="0")
        self.DataTree.column("si", anchor="w")
        self.DataTree.heading("m", text="m")
        self.DataTree.heading("m", anchor="center")
        self.DataTree.column("m", width="84")
        self.DataTree.column("m", minwidth="20")
        self.DataTree.column("m", stretch="0")
        self.DataTree.column("m", anchor="w")
        self.DataTree.bind('<Button-1>', LensProbDes_support.TreeClick)

# The following code facilitates the Scrolled widgets.


class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        self.configure(yscrollcommand=self._autoscroll(vsb))
        self.grid(column=0, row=0, sticky='nsew')
        vsb.grid(column=1, row=0, sticky='ns')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
            | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            global top
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                top.DataTree.place(relx=0.322, rely=0.05,
                                   relheight=0.8, relwidth=0.530)
                sbar.grid_remove()
            else:
                top.DataTree.place(relx=0.322, rely=0.05,
                                   relheight=0.8, relwidth=0.558)
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>',
                       lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))


def _unbound_to_mousewheel(event, widget):
    widget.unbind_all('<MouseWheel>')


def _on_mousewheel(event, widget):
    widget.yview_scroll(-1*int(event.delta/120), 'units')


if __name__ == '__main__':
    vp_start_gui()
